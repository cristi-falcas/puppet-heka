[hekad]
# The maximum number of times a message can be re-injected into the system.
# This is used to prevent infinite message loops from filter to filter; the default is 4.
max_message_loops = <%= scope['heka::max_message_loops'] %>
# The maximum number of messages that a sandbox filter’s ProcessMessage
# function can inject in a single call; the default is 1
max_process_inject = <%= scope['heka::max_process_inject'] %>
# The maximum number of nanoseconds that a sandbox filter’s ProcessMessage
# function can consume in a single call before being terminated; the default is 100000
max_process_duration = <%= scope['heka::max_process_duration'] %>
# The maximum number of messages that a sandbox filter’s TimerEvent function can inject in a single call; the default is 10
max_timer_inject = <%= scope['heka::max_timer_inject'] %>
# A time duration string (e.x. “2s”, “2m”, “2h”) indicating how long a message pack
# can be ‘idle’ before its considered leaked by heka. If too many packs leak from a bug
# in a filter or output then heka will eventually halt. This setting indicates when that is considered to have occurred
<% if scope['heka::max_pack_idle'] != :undef then -%>max_pack_idle = "<%= scope['heka::max_pack_idle'] -%>"
<% end -%>
# Enable multi-core usage; the default is 1 core. More cores will generally increase message throughput.
# Best performance is usually attained by setting this to 2 x (number of cores). This assumes each core is hyper-threaded
maxprocs = <%= scope['heka::maxprocs'] %>
# Specify the pool size of maximum messages that can exist. Default is 100
poolsize = <%= scope['heka::poolsize'] %>
# Specify the buffer size for the input channel for the various Heka plugins. Defaults to 30
plugin_chansize = <%= scope['heka::plugin_chansize'] %>
# Base working directory Heka will use for persistent storage through process and server restarts.
# The hekad process must have read and write access to this directory
base_dir = "<%= scope['heka::base_dir'] -%>"
# Root path of Heka’s “share directory”, where Heka will expect to find certain resources it needs to consume.
# The hekad process should have read- only access to this directory
share_dir = "<%= scope['heka::share_dir'] -%>"
# Specifies the denominator of the sample rate Heka will use when computing the time required
# to perform certain operations, such as for the ProtobufDecoder to decode a message, or the router
# to compare a message against a message matcher. Defaults to 1000, i.e. duration will be calculated for one message out of 1000
sample_denominator = <%= scope['heka::sample_denominator'] %>
# Optionally specify the location of a pidfile where the process id of the running hekad process will be written.
# The hekad process must have read and write access to the parent directory (which is not automatically created).
# On a successful exit the pidfile will be removed. If the path already exists the contained pid will be checked
# for a running process. If one is found, the current process will exit with an error
<% if scope['heka::pid_file'] != :undef then -%>pid_file = "<%= scope['heka::pid_file'] -%>"
<% end -%>
# Specifies the hostname to use whenever Heka is asked to provide the local host’s hostname. Defaults to whatever is provided by Go’s os.Hostname() call
<% if scope['heka::hostname'] != :undef then -%>hostname = "<%= scope['heka::hostname'] -%>"
<% end -%>
# The maximum size (in bytes) of message can be sent during processing. Defaults to 64KiB
max_message_size = <%= scope['heka::max_message_size'] %>
# Turn on CPU profiling of hekad; output is logged to the output_file.
<% if scope['heka::cpuprof'] != :undef then -%>cpuprof = "<%= scope['heka::cpuprof'] -%>"
<% end -%>
# Enable memory profiling; output is logged to the output_file.
<% if scope['heka::memprof'] != :undef then -%>memprof = "<%= scope['heka::memprof'] -%>"
<% end -%>
